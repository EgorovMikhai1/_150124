что делает
Программист Java (Java Developer) создает приложения разной сложности, используя один из самых распространенных языков программирования «Джава» (Java). Он не только пишет программный код, но и занимается внедрением, тестированием и модификацией кода.


История Java очень интересна. 
Первоначально Java был разработан для интерактивного телевидения, но 90-e и в то время это была слишком передовая технология для индустрии цифрового кабельного телевидения. История Все началось с Зеленой команды. 
Члены команды Java (также известной как Green Team) инициировали этот проект для разработки языка для цифровых устройств, таких как телевизионные приставки, телевизоры, радиолы и т. д.

Принципы создания программирования на Java были «простыми, надежными, переносимыми, независимыми от платформы, безопасными, высокопроизводительными, многопоточными, нейтральными к архитектуре, объектно-ориентированными, интерпретируемыми и динамическими». 
Итак Джеймс Гослинг — основатель Java и члены его команды начали проект в начале 90-х.
В настоящее время Java используется в интернет-программировании, мобильных устройствах, играх, решениях для электронного бизнеса и т. д.

1) Джеймс Гослинг , Майк Шеридан и Патрик Нотон инициировали проект языка Java в июне 1991 года.

2) Первоначально он был разработан для небольших систем, встроенных в электронные устройства, такие как телеприставки.

3) Во-первых, он назывался "Greentalk" Джеймса Гослинга, а расширение файла было .gt.

4) После этого он назывался Oak и разрабатывался в рамках проекта Green.

Почему Java назвали «Дубом»?
История Java от Oak до Java
5) Почему дуб? Дуб является символом силы и выбран в качестве национального дерева в США.

6) В 1995 году Oak был переименован в «Java» , потому что это уже была торговая марка Oak Technologies.

7) Почему они выбрали название Java для языка Java? 
Команда собралась, чтобы выбрать новое имя. Предлагаемые слова: «Шелк»"Silk", «толчок»"jolt", «ДНК»"DNA". 
Они хотели что-то, что отражало бы суть технологии: революционное, динамичное, живое, крутое, уникальное и простое в использовании.

8) В итоге, по словам Гослинга, название Java было выбрано за чашкой кофе возле его офиса. Java — остров в Индонезии, где был произведен первый кофе (называемый кофе Java) 
Это своего рода эспрессо-бобы. И поскольку Java была настолько уникальной, большинство членов команды выюрали Java другим названиям.

9) Обратите внимание, что Java — это просто название, а не аббревиатура.

10) Первоначально разработан Джеймсом Гослингом в Sun Microsystems (которая сейчас является дочерней компанией Oracle Corporation) и выпущен в 1995 году.

11) JDK 1.0 был выпущен 23 января 1996 года.

С момента выпуска Java SE 8 корпорация Oracle следует схеме, согласно которой каждая четная версия выпускается в марте, а нечетная — в сентябре.


Программа
Программа — это текст (код), написанный на одном из языков программирования, содержащий инструкции и операторы в логической последовательности, которые заставляют работать аппаратное обеспечение, выполняя необходимые пользователю функции.

Для пользователя программа чаще всего представляется как инсталлятор (экзешник), который нужно скачать в папку загрузок, запустить на компьютере и установить в определенную папку с набором необходимых модулей, библиотек и файлов.

Ежедневно мы выполняем сотни и тысячи инструкций, по сути, работая как «биороботы», исполняем набор определенных действий — программ.

Есть программа «сходить в магазин», а есть «приготовить еду», но чтобы исполнить эти программы необходимо выполнить ряд последовательных действий (инструкций). Например, чтобы выполнить программу «сходить в магазин», необходимо:

одеться;
взять деньги;
выйти из дома;
дойти до магазина;
в магазине осуществить выбор нужных продуктов;
вернуться домой.

В свою очередь, эти последовательности действий могут быть и дополнительными подпрограммами со своими инструкциями.


JVM
JVM выполняет две основные функции: позволяет запускать Java-программы на любом устройстве или в любой операционной системе (известный как принцип «Написать один раз, запускать где угодно»), а также управлять и оптимизировать программную память.
Когда в 1995 году была выпущена Java, все компьютерные программы были написаны для конкретной операционной системы, а программная память управлялась разработчиком программного обеспечения. Так что JVM стала откровением.

уникальноcть торгового предложения именно в этом и была- Java: разработчики писали программу под Windows, а она запускалась на macOS почти без изменений.
Сейчас это звучит вполне естественно, а 25 лет назад казалось настоящим чудом.
apstore or googleplay

Разработчики пишут код на языке Java. После этого специальным инструментом, который называется javac, исходный код компилируется в байт-код.
Что здесь важно:
На этом этапе нет ничего платформенно-специфичного, весь код на языке Java (как и байт-код Java) универсален.
Байт-код — это язык, предназначенный не для людей, а для машин. Обычному разработчику его читать не нужно.
Полученный байт-код Java передаётся на вход виртуальной машины Java. И вот как именно она будет его исполнять

Есть замечательное следствие: разработчику не обязательно ограничиваться языком Java, ведь виртуальная машина понятия не имеет, откуда взяли байт-код, который пришёл к ней на вход, был ли это изначально Java-код или что-то другое. То есть программу можно писать на любом языке, который транслируется в байт-код. И таких языков — целое семейство: Kotlin, Clojure, Groovy и так далее.

Javас. Это компилятор, который преобразует исходники Java в class-файлы или формат jar.
JVM. Виртуальная машина, которая исполняет байт-код.

Какие конкуренты есть у JVM
Самый известный конкурент Java Virtual Machine — платформа .NET и их виртуальная машина для реализации C#.
Java и C# решают одни и те же задачи и обладают одними и теми же преимуществами: 
строгая типизация, сборка мусора, безопасность.

Раньше между платформами была одна принципиальная разница: Java был кроссплатформенным, а .NET и C# работали только на Windows. 
Сейсчас появился .NET Core, C# тоже стал мультиплатформенным.

сами языки Java и C# довольно разные, и C# развивается быстрее: там регулярно появляются интересные фичи, которые в Java приходят с большим опозданием или не приходят вообще. Поэтому как язык C# в целом выглядит интереснее.

Зато у Java мощная реализация и хорошо оптимизированные виртуальные машины, лучший алгоритм сборки мусора, более быстрый стартап. Поэтому по многим показателям реализация Java выглядит куда лучше C#. А некоторые вещи, которые уже давно есть в JVM, только-только появляются в .NET.

Есть и другие языки, которые претендуют на роль конкурента Java, но они отличаются гораздо сильнее. 
Например, Python, который тоже бьет рекорды и занимает в определенных рейтингах 1-е место. Он популярен в Data Science, AI, машинном обучении, скриптах. Но к сожалению, динамическая типизация не позволяет держать на нём слишком большую кодовую базу.

Ещё есть безумно популярный JavaScript, но его интересы с Java не очень пересекаются, так как сегодня Java во фронтенде не используется.

Обратная совместимость — один из главных принципов Java. От некоторых вещей иногда отказываются, но при этом старый код всё равно должен продолжать работать.

С одной стороны, этот принцип позволяет построить стабильную экосистему. Бизнес может не бояться, что выйдет новая версия, которая всё сломает и навсегда заблокирует путь к обновлению. С другой стороны, это тормозит инновации.

Если осталось время!
Важно различать эти три технологии, а также понимать, как они связаны:

JVM — это компонент платформы Java, который выполняет программы.
JRE — это часть Java на диске, которая создает JVM.
JDK позволяет разработчикам создавать программы Java, которые могут выполняться и запускаться с помощью JVM и JRE.
Разработчики, плохо знакомые с Java, часто путают Java Development Kit и Java Runtime Environment. 
Различие состоит в том, что JDK — это пакет инструментов для разработки программного обеспечения на основе Java, тогда как JRE — это пакет инструментов для запуска кода Java.

JRE можно использовать как отдельный компонент для простого запуска Java-программ, но он также является частью JDK. 
Для JDK требуется JRE, поскольку выполнение программ на Java является частью их разработки.

Доступны следующие пакеты: Java Enterprise Edition (Java EE), Java Standard Edition (Java SE) и Java Mobile Edition (Java ME).


main()
public static void main(String[] args)
{
... ... ... ...//Код метода
}
Метод main() отличается от всех остальных методов тем, что является, как правило, точкой входа в программу. Этот метод вызывается виртуальной машиной Java. Как только заканчивается выполнение метода main(), так сразу же завершается, тем самым, работа самой программы.

Ключевое слово public означает, что метод main() доступен везде, где доступен содержащий его класс. Ключевое слово static означает, что метод является статическим, т. е. не требует для своего вызова наличие экземпляра класса. Ключевое слово void означает, что метод не возвращает никакого значения. Все эти три слова обязательно должны присутствовать в описании метода.

Запись (String[] args) после имени метода представляет собой список его параметров. Имеется лишь один параметр args, содержащий ссылку на массив строк. Этот массив формируется из строки, переданной классу, содержащему метод main(), при запуске этого класса на выполнение командой java.

типа и количества параметров метода main(), то они изменению не подлежат.

 меню Run -> Edit Configuration -> Application в поле Program Arguments указываете аргументы через пробел.



Java System.out.println() используется для печати переданного ему аргумента. Утверждение можно разбить на 3 части, которые можно понимать отдельно как:

System : это последний класс, определенный в пакете java.lang .
out: это экземпляр типа PrintStream , который является общедоступным и статическим полем-членом класса System .
println() : поскольку все экземпляры класса PrintStream имеют общедоступный метод println(), следовательно, мы можем вызывать его и на выходе. Это обновленная версия print(). Он печатает любой переданный ему аргумент и добавляет к выводу новую строку. Мы можем предположить, что System.out представляет стандартный поток вывода.


ШАБЛОН ОБЪЕКТА
В теле класса объявляются переменные и методы класса. Их может быть сколько угодно.
Объявление класса создает только шаблон, но не конкретный объект.

ТИПЫ ДАННЫХ
В Java есть две категории, в которых типы данных разделены. 

Примитивный тип данных: например, boolean, char, int, short, byte, long, float и double .
Непримитивный тип данных или объектный тип данных: например, строка, массив и т. д.

Типы примитивных типов данных
Примитивные данные представляют собой только отдельные значения и не имеют особых возможностей. Существует 8 примитивных типов данных.

BOOLEAN
    public static void main(String args[])
    {
 
          //Boolean data type is a data type that has one of two possible values (usually denoted true and false).
        // Setting boolean to false and true initially
          boolean a = false;
        boolean b = true;
 
        // If condition holds
        if (b == true){
 
            // Print statement
            System.out.println("Hi students");
        }
           // If condition holds
          if(a == false){
           
          // Print statement
            System.out.println("Hello teachers");        
        }
    }
}

BYTE
        byte a = 126;
 
        // byte is 8 bit value
        System.out.println(a);
 
        a++;
        System.out.println(a);
 
        // It overflows here because
        // byte can hold values from -128 to 127
        a++;
        System.out.println(a);
 
        // Looping back within the range
        a++;
        System.out.println(a);

FLOAT
       float value2 = 9.87f;
        System.out.println(value2);

CHAR
Вам должно быть интересно, почему размер char равен 2 байтам в Java? 

Итак, в других языках, таких как C/C++, используются только символы ASCII, а для представления всех символов ASCII достаточно 8-бит. Но java использует систему Unicode, а не систему кодирования ASCII, и для представления системы Unicode 8 бит недостаточно для представления всех символов, поэтому java использует 2 байта для символов. Unicode определяет полностью международный набор символов, который может представлять большинство письменных языков мира. Это объединение десятков наборов символов, таких как латиница, греческий язык, кириллица, катакана, арабский язык и многие другие.

ТИПЫ ОПЕРАТОРОВ
Выделяют унарные, бинарные и тернарные операторы. Например, !false — унарный, a + b — бинарный, а? : — является единственным оператором, принимающим на вход три аргумента.


самостоятельно
Если переменная a равна 10, то выведите 'Верно', иначе выведите 'Неверно'.