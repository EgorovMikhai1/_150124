******Сценарии*******

************************************************
Проверка с использованием @ValueSource для дохода

Проверка, что метод возвращает положительное значение для
различных уровней дохода и фиксированного статуса налогоплательщика.
Значения для income: 30000, 60000, 100000
Фиксированные значения для status: "single"
************************************************

************************************************
Проверка с использованием @CsvSource

Проверка, что метод возвращает правильное значение для
различных комбинаций дохода и статуса налогоплательщика.
Набор данных:
income: 30000, status: "single", ожидаемое значение: 6000
income: 60000, status: "single", ожидаемое значение: 15000
income: 90000, status: "married", ожидаемое значение: 18000
************************************************

************************************************
Проверка с использованием @MethodSource

Проверка, что метод возвращает правильное значение для
различных комбинаций дохода и статуса налогоплательщика.
Набор данных (метод должен возвращать Stream<Arguments>):
income: 30000, status: "single", ожидаемое значение: 6000
income: 60000, status: "single", ожидаемое значение: 15000
income: 90000, status: "married", ожидаемое значение: 18000
************************************************

************************************************
Проверка с использованием @EnumSource

Создать перечисление, содержащее различные комбинации дохода,
статуса налогоплательщика и ожидаемого значения налога.
Значения в перечислении:
CASE1: income: 30000, status: "single", ожидаемое значение: 6000
CASE2: income: 60000, status: "single", ожидаемое значение: 15000
CASE3: income: 90000, status: "married", ожидаемое значение: 18000
************************************************

************************************************
Проверка с использованием @CsvFileSource

Создать CSV-файл с набором данных для проверки различных
комбинаций дохода и статуса налогоплательщика.
Пример содержимого файла:
income,status,expectedTax
30000,single,6000
60000,single,15000
90000,married,18000
************************************************

************************************************
Проверка с некорректными входными данными

Проверка, что метод выбрасывает исключение
 IllegalArgumentException при передаче некорректных значений.
Некорректные значения:
income: -1, status: "single"
income: 30000, status: "divorced"
income: -50000, status: "married"
************************************************