Техническое задание (ТЗ)
Задача 1: Разработка системы управления заказами
Цель:
Создать систему для управления заказами, включающую работу с клиентами, товарами и заказами. Система должна позволять сохранять и извлекать заказы, используя репозиторий данных.

Описание задачи:
Разработать классы:

Customer: представляет клиента.
Item: представляет товар.
PurchaseOrder: представляет заказ, включающий клиента и товар.
OrderRepository: интерфейс для работы с репозиторием заказов.
OrderRepositoryImpl: реализация OrderRepository с использованием Map для хранения данных.
OrderService: сервис для работы с заказами, использующий OrderRepository.
Функциональные требования:

Класс Customer должен содержать поля id (уникальный идентификатор клиента) и name (имя клиента).
Класс Item должен содержать поля id (уникальный идентификатор товара) и name (название товара).
Класс PurchaseOrder должен содержать поля id (уникальный идентификатор заказа), customer (объект клиента) и item (объект товара).
Интерфейс OrderRepository должен определять методы:
void save(PurchaseOrder order): для сохранения заказа.
PurchaseOrder findById(int id): для поиска заказа по идентификатору.
Класс OrderRepositoryImpl должен реализовывать интерфейс OrderRepository, используя Map для хранения данных.
Класс OrderService должен предоставлять методы для размещения и получения заказа, используя OrderRepository.
Нефункциональные требования:

Код должен быть написан на языке Java.
Использовать объектно-ориентированный подход.
Классы должны быть разработаны с учетом принципов SOLID.
Задача 2: Написание тестов с использованием Mockito
Цель:
Создать модульные тесты для системы управления заказами, используя библиотеку Mockito для мокирования зависимостей.

Описание задачи:
Разработать тесты для классов:

OrderService: проверка корректности работы методов placeOrder и getOrder.
Функциональные требования:

Использовать аннотацию @Mock для создания моков OrderRepository.
Использовать аннотацию @InjectMocks для создания экземпляра OrderService, в который будут инжектироваться моки OrderRepository.
Написать тест для метода placeOrder, проверяющий, что метод save у OrderRepository вызывается с правильным заказом.
Написать тест для метода getOrder, проверяющий, что метод findById у OrderRepository вызывается с правильным идентификатором, и что возвращается корректный заказ.
Нефункциональные требования:

Код тестов должен быть написан на языке Java.
Использовать библиотеку Mockito для мокирования зависимостей.
Тесты должны быть написаны с использованием фреймворка JUnit 5.