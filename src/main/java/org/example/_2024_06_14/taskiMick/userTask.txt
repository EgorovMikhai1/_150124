Задача: Разработка и тестирование системы управления пользователями
Цель:
Создать систему для управления пользователями, включающую работу с пользователями и их данными. Система должна позволять сохранять и извлекать пользователей, используя репозиторий данных.

Описание задачи:
Разработать классы:

User: представляет пользователя.
UserRepository: интерфейс для работы с репозиторием пользователей.
UserRepositoryImpl: реализация UserRepository с использованием List для хранения данных.
UserService: сервис для работы с пользователями, использующий UserRepository.
Функциональные требования:

Класс User должен содержать поля id (уникальный идентификатор пользователя), name (имя пользователя) и email (электронная почта пользователя).
Интерфейс UserRepository должен определять методы:
void save(User user): для сохранения пользователя.
User findById(int id): для поиска пользователя по идентификатору.
Класс UserRepositoryImpl должен реализовывать интерфейс UserRepository, используя List для хранения данных.
Класс UserService должен предоставлять методы для добавления и получения пользователя, используя UserRepository.
Нефункциональные требования:

Код должен быть написан на языке Java.
Использовать объектно-ориентированный подход.
Классы должны быть разработаны с учетом принципов SOLID.
Разработать тесты для классов:

UserService: проверка корректности работы методов addUser и getUser.
Функциональные требования:

Использовать аннотацию @Mock для создания моков UserRepository.
Использовать аннотацию @InjectMocks для создания экземпляра UserService, в который будут инжектироваться моки UserRepository.
Написать тест для метода addUser, проверяющий, что метод save у UserRepository вызывается с правильным пользователем.
Написать тест для метода getUser, проверяющий, что метод findById у UserRepository вызывается с правильным идентификатором, и что возвращается корректный пользователь.
Нефункциональные требования:

Код тестов должен быть написан на языке Java.
Использовать библиотеку Mockito для мокирования зависимостей.
Тесты должны быть написаны с использованием фреймворка JUnit 5.